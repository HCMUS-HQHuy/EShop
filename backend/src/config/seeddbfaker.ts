// file: dbtester.ts

import { Client } from 'pg';
import { faker } from '@faker-js/faker';
import database from '../database/index.database'; // ƒê∆∞·ªùng d·∫´n t·ªõi file c·∫•u h√¨nh DB c·ªßa b·∫°n
import * as utils from 'utils/index.utils'; // ƒê∆∞·ªùng d·∫´n t·ªõi file utils c·ªßa b·∫°n

/**
 * =================================================================================
 * H√ÄM H·ªñ TR·ª¢ ƒê·ªÇ T·∫†O D·ªÆ LI·ªÜU M·∫™U
 * =================================================================================
 */

// H√†m t·∫°o ng∆∞·ªùi d√πng (bao g·ªìm c·∫£ ng∆∞·ªùi b√°n v√† ng∆∞·ªùi mua)
async function seedUsers(db: Client, count: number): Promise<number[]> {
    console.log('Seeding users...');
    const userIds: number[] = [];
    for (let i = 0; i < count; i++) {
        const hashedPassword = utils.hashPassword('Hqh123123@'); // M·∫≠t kh·∫©u chung cho t·∫•t c·∫£ user test
        const query = `
            INSERT INTO users (username, password, email, fullname, role, status)
            VALUES ($1, $2, $3, $4, $5, 'Active')
            RETURNING user_id;
        `;
        const values = [
            faker.internet.username().toLowerCase() + i, // Th√™m i ƒë·ªÉ ƒë·∫£m b·∫£o unique
            hashedPassword,
            faker.internet.email(),
            faker.person.fullName(),
            'User' // M·ªçi ng∆∞·ªùi ƒë·ªÅu l√† 'User' theo lu·ªìng m·ªõi
        ];
        const result = await db.query(query, values);
        userIds.push(result.rows[0].user_id);
    }
    console.log(`  -> Seeded ${count} users.`);
    return userIds;
}

// H√†m t·∫°o c·ª≠a h√†ng cho m·ªôt s·ªë ng∆∞·ªùi d√πng
async function seedShops(db: Client, userIds: number[], count: number): Promise<number[]> {
    console.log('Seeding shops...');
    const shopIds: number[] = [];
    // Ch·ªâ t·∫°o shop cho m·ªôt n·ª≠a s·ªë ng∆∞·ªùi d√πng ƒë·∫ßu ti√™n
    const sellerUserIds = userIds.slice(0, Math.floor(userIds.length / 2));

    for (const userId of sellerUserIds) {
        if (shopIds.length >= count) break;
        const query = `
            INSERT INTO shops (user_id, shop_name, shop_description, status)
            VALUES ($1, $2, $3, 'Active')
            RETURNING shop_id;
        `;
        const values = [
            userId,
            faker.company.name() + ' Shop',
            faker.lorem.sentence()
        ];
        const result = await db.query(query, values);
        shopIds.push(result.rows[0].shop_id);
    }
    console.log(`  -> Seeded ${shopIds.length} shops.`);
    return shopIds;
}

// file: dbtester.ts

async function seedCategories(db: Client): Promise<number[]> {
    console.log('Seeding hierarchical categories...');

    // 1. ƒê·ªãnh nghƒ©a c·∫•u tr√∫c danh m·ª•c cha-con
    const categoriesHierarchy = [
        {
            name: 'Th·ªùi Trang & Ph·ª• Ki·ªán',
            description: 'C√°c s·∫£n ph·∫©m th·ªùi trang v√† ph·ª• ki·ªán th·ªß c√¥ng.',
            children: [
                { name: 'Qu·∫ßn √Åo D·ªát Tay', description: 'Trang ph·ª•c ƒë∆∞·ª£c l√†m t·ª´ v·∫£i d·ªát th·ªß c√¥ng.' },
                { name: 'T√∫i X√°ch & V√≠ Da', description: 'T√∫i x√°ch v√† v√≠ ƒë∆∞·ª£c l√†m b·∫±ng tay.' },
                { name: 'Trang S·ª©c Th·ªß C√¥ng', description: 'Trang s·ª©c ƒë·ªôc ƒë√°o t·ª´ c√°c ngh·ªá nh√¢n.' },
            ],
        },
        {
            name: 'Nh√† C·ª≠a & ƒê·ªùi S·ªëng',
            description: 'V·∫≠t d·ª•ng trang tr√≠ v√† s·ª≠ d·ª•ng trong gia ƒë√¨nh.',
            children: [
                { name: 'ƒê·ªì G·ªëm S·ª©', description: 'Ly, ch√©n, ƒëƒ©a, b√¨nh hoa l√†m t·ª´ g·ªëm s·ª©.' },
                { name: 'N·ªôi Th·∫•t G·ªó', description: 'B√†n, gh·∫ø, k·ªá s√°ch nh·ªè l√†m t·ª´ g·ªó t·ª± nhi√™n.' },
                { name: 'ƒê√®n Trang Tr√≠', description: 'ƒê√®n l·ªìng, ƒë√®n b√†n mang phong c√°ch ngh·ªá thu·∫≠t.' },
            ],
        },
        {
            name: 'Ngh·ªá Thu·∫≠t & S∆∞u T·∫ßm',
            description: 'C√°c t√°c ph·∫©m ngh·ªá thu·∫≠t v√† ƒë·ªì s∆∞u t·∫ßm c√≥ gi√° tr·ªã.',
            children: [
                { name: 'Tranh V·∫Ω', description: 'Tranh s∆°n d·∫ßu, s∆°n m√†i, m√†u n∆∞·ªõc...' },
                { name: 'T∆∞·ª£ng ƒêi√™u Kh·∫Øc', description: 'T∆∞·ª£ng g·ªó, t∆∞·ª£ng ƒë√°, t∆∞·ª£ng ƒë·ªìng...' },
            ],
        },
    ];

    const allInsertedIds: number[] = [];

    // 2. H√†m ƒë·ªá quy ƒë·ªÉ ch√®n danh m·ª•c v√†o DB
    // N√≥ s·∫Ω t·ª± g·ªçi l·∫°i ch√≠nh n√≥ ƒë·ªÉ x·ª≠ l√Ω c√°c danh m·ª•c con
    const insertCategory = async (category: any, parentId: number | null) => {
        const query = `
            INSERT INTO categories (name, description, parent_id)
            VALUES ($1, $2, $3)
            ON CONFLICT (name) DO UPDATE SET name = EXCLUDED.name -- C·∫≠p nh·∫≠t ƒë·ªÉ c√≥ th·ªÉ l·∫•y RETURNING
            RETURNING category_id;
        `;
        const result = await db.query(query, [category.name, category.description, parentId]);
        
        // N·∫øu kh√¥ng c√≥ k·∫øt qu·∫£ (do ON CONFLICT DO NOTHING), th√¨ truy v·∫•n l·∫°i ƒë·ªÉ l·∫•y ID
        let categoryId;
        if (result.rows.length > 0) {
            categoryId = result.rows[0].category_id;
        } else {
            const selectResult = await db.query('SELECT category_id FROM categories WHERE name = $1', [category.name]);
            categoryId = selectResult.rows[0].category_id;
        }

        allInsertedIds.push(categoryId);

        // N·∫øu danh m·ª•c n√†y c√≥ con, ti·∫øp t·ª•c g·ªçi ƒë·ªá quy cho c√°c con c·ªßa n√≥
        if (category.children && category.children.length > 0) {
            for (const child of category.children) {
                await insertCategory(child, categoryId); // Truy·ªÅn ID c·ªßa cha v√†o
            }
        }
    };

    // 3. B·∫Øt ƒë·∫ßu qu√° tr√¨nh b·∫±ng c√°ch l·∫∑p qua c√°c danh m·ª•c c·∫•p cao nh·∫•t
    for (const topLevelCategory of categoriesHierarchy) {
        await insertCategory(topLevelCategory, null); // Danh m·ª•c c·∫•p cao nh·∫•t kh√¥ng c√≥ parentId (null)
    }

    console.log(`  -> Seeded ${allInsertedIds.length} categories with parent-child relationships.`);
    return allInsertedIds;
}

// H√†m t·∫°o s·∫£n ph·∫©m
async function seedProducts(db: Client, shopIds: number[], count: number): Promise<number[]> {
    console.log('Seeding products...');
    const productIds: number[] = [];
    for (let i = 0; i < count; i++) {
        const query = `
            INSERT INTO products (name, description, price, stock_quantity, image_url, shop_id, status)
            VALUES ($1, $2, $3, $4, $5, $6, 'Active')
            RETURNING product_id;
        `;
        const values = [
            faker.commerce.productName(),
            faker.commerce.productDescription(),
            faker.commerce.price({ min: 10, max: 1000, dec: 2 }),
            faker.number.int({ min: 10, max: 100 }),
            faker.image.urlLoremFlickr({ category: 'technics' }),
            faker.helpers.arrayElement(shopIds), // Ch·ªçn ng·∫´u nhi√™n m·ªôt shop
        ];
        const result = await db.query(query, values);
        productIds.push(result.rows[0].product_id);
    }
    console.log(`  -> Seeded ${count} products.`);
    return productIds;
}

// H√†m n·ªëi s·∫£n ph·∫©m v·ªõi danh m·ª•c
async function seedProductCategories(db: Client, productIds: number[], categoryIds: number[]) {
    console.log('Seeding product-category relationships...');
    let count = 0;
    for (const productId of productIds) {
        const numCategories = faker.number.int({ min: 1, max: 2 });
        const selectedCategories = faker.helpers.arrayElements(categoryIds, numCategories);
        for (const categoryId of selectedCategories) {
            const query = `INSERT INTO product_categories (product_id, category_id) VALUES ($1, $2) ON CONFLICT DO NOTHING;`;
            await db.query(query, [productId, categoryId]);
            count++;
        }
    }
    console.log(`  -> Created ${count} product-category links.`);
}

/**
 * =================================================================================
 * H√ÄM CH√çNH ƒê·ªÇ CH·∫†Y TO√ÄN B·ªò QU√Å TR√åNH SEEDING
 * =================================================================================
 */
export default async function seedDatabase() {
    let db: Client | undefined = undefined;

    try {
        db = await database.getConnection();
        console.log('üöÄ Starting database seeding...');

        // Ch·∫°y c√°c h√†m seeding theo ƒë√∫ng th·ª© t·ª± ph·ª• thu·ªôc
        const userIds = await seedUsers(db, 10);
        const shopIds = await seedShops(db, userIds, 5);
        const categoryIds = await seedCategories(db);
        
        // Ch·ªâ t·∫°o s·∫£n ph·∫©m n·∫øu c√≥ shop ƒë∆∞·ª£c t·∫°o
        if (shopIds.length > 0 && categoryIds.length > 0) {
            const productIds = await seedProducts(db, shopIds, 20); // T·∫°o 20 s·∫£n ph·∫©m
            await seedProductCategories(db, productIds, categoryIds);
        } else {
             console.log('Skipping product seeding because no shops or categories were created.');
        }

        // TODO: B·∫°n c√≥ th·ªÉ th√™m c√°c h√†m seed cho orders, reviews, cart_items... ·ªü ƒë√¢y
        // theo logic t∆∞∆°ng t·ª±.

        console.log('‚úÖ Database seeding completed successfully!');

    } catch (error) {
        console.error('‚ùå Error during database seeding:', error);
    } finally {
        if (db) {
            await database.releaseConnection(db);
            console.log('Database connection released.');
        }
    }
}