enum USER_ROLE {
  ADMIN
  SELLER
  CUSTOMER
  GUEST
}

enum ORDER_STATUS {
  PENDING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum SHOP_STATUS {
  ACTIVE
  REJECTED
  PENDING_VERIFICATION
  CLOSED
  BANNED
}

enum USER_STATUS {
  ACTIVE
  BANNED
}

enum PAYMENT_STATUS {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum PAYMENT_METHOD {
  MOMO
  COD
  BANK_TRANSFER
  PAYPAL
}

enum PRODUCT_STATUS {
  PENDING
  REJECTED
  ACTIVE
  INACTIVE
  BANNED
}

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Categories {
  id                Int                 @id @default(autoincrement())
  iconName          String?             @db.VarChar(100)
  title             String              @unique @db.VarChar(100)
  description       String?
  parentId          Int?
  createdAt         DateTime?           @default(now()) @db.Timestamptz(6)
  isDeleted         Boolean             @default(false)
  deletedAt         DateTime?           @db.Timestamptz(6)
  deletedBy         Int?
  categories        Categories?         @relation("categoriesTocategories", fields: [parentId], references: [id], onUpdate: NoAction)
  otherCategories   Categories[]        @relation("categoriesTocategories")
  users             Users?              @relation(fields: [deletedBy], references: [id], onUpdate: NoAction, map: "fk_category_deletedBy")
  productCategories ProductCategories[]
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model Conversations {
  id               Int        @id @default(autoincrement())
  participant1Id   Int
  participant2Id   Int
  participant1Role String     @db.Char(10)
  participant2Role String     @db.Char(10)
  context          Json?
  createdAt        DateTime   @default(now()) @db.Timestamp(6)
  participant1     Users      @relation("conversations_participant1_idTousers", fields: [participant1Id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  participant2     Users      @relation("conversations_participant2_idTousers", fields: [participant2Id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  messages         Messages[]
}

model Messages {
  id             Int           @id @default(autoincrement())
  conversationId Int
  senderId       Int
  content        String
  sentAt         DateTime      @default(now()) @db.Timestamp(6)
  isRead         Boolean?      @default(false)
  conversations  Conversations @relation(fields: [conversationId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users          Users         @relation(fields: [senderId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model OrderItems {
  id        Int      @id @default(autoincrement())
  orderId   Int
  productId Int
  quantity  Int
  price     Decimal  @db.Decimal(10, 2)
  discount  Decimal  @default(0) @db.Decimal(10, 2)
  orders    Orders   @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_order_item_order")
  products  Products @relation(fields: [productId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_order_item_product")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model Orders {
  id              Int          @id @default(autoincrement())
  shopId          Int
  userId          Int
  receiverName    String       @db.VarChar(100)
  shippingAddress String       @db.VarChar(255)
  phoneNumber     String       @db.VarChar(15)
  email           String       @db.VarChar(100)
  total           Decimal      @db.Decimal(12, 2)
  shippingFee     Decimal      @default(0) @db.Decimal(12, 2)
  discount        Decimal      @default(0) @db.Decimal(12, 2)
  final           Decimal      @db.Decimal(12, 2)
  status          ORDER_STATUS @default(PENDING)
  createdAt       DateTime?    @default(now()) @db.Timestamptz(6)
  orderItems      OrderItems[]
  shops           Shops        @relation(fields: [shopId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_order_shop")
  users           Users        @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_order_user")
  payments        Payments[]
}

model PaymentMethods {
  id       Int        @id @default(autoincrement())
  code     String     @unique @db.VarChar(20)
  name     String     @db.VarChar(100)
  img      String?    @db.VarChar(255)
  link     String?    @db.VarChar(255)
  isActive Boolean    @default(true)
  payments Payments[]
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model Payments {
  paymentId         Int            @id @default(autoincrement())
  orderId           Int
  paymentCode       String         @unique @db.VarChar(20)
  paymentMethodCode String         @db.VarChar(20)
  amount            Decimal        @db.Decimal(12, 2)
  status            ORDER_STATUS   @default(PENDING)
  paymentMethods    PaymentMethods @relation(fields: [paymentMethodCode], references: [code], onDelete: NoAction, onUpdate: NoAction, map: "fk_payment_method")
  orders            Orders         @relation(fields: [orderId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_payment_order")
}

model ProductCategories {
  productId  Int
  categoryId Int
  categories Categories @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  products   Products   @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([productId, categoryId])
}

model ProductImages {
  id        Int       @id @default(autoincrement())
  productId Int
  imageUrl  String    @db.VarChar(255)
  createdAt DateTime? @default(now()) @db.Timestamptz(6)
  isDeleted Boolean   @default(false)
  deletedAt DateTime? @db.Timestamptz(6)
  deletedBy Int?
  users     Users?    @relation(fields: [deletedBy], references: [id], onUpdate: NoAction, map: "fk_image_deletedBy")
  products  Products  @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_image_product")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model Products {
  id                Int                 @id @default(autoincrement())
  sku               String              @db.VarChar(100)
  shortName         String              @db.VarChar(255)
  name              String              @db.VarChar(255)
  price             Decimal             @db.Decimal(10, 2)
  discount          Decimal             @default(0) @db.Decimal(5, 2)
  description       String?
  stockQuantity     Int
  imageUrl          String?             @db.VarChar(255)
  shopId            Int
  status            PRODUCT_STATUS      @default(PENDING)
  createdAt         DateTime?           @default(now()) @db.Timestamptz(6)
  isDeleted         Boolean             @default(false)
  deletedAt         DateTime?           @db.Timestamptz(6)
  deletedBy         Int?
  orderItems        OrderItems[]
  productCategories ProductCategories[]
  productImages     ProductImages[]
  users             Users?              @relation(fields: [deletedBy], references: [id], onUpdate: NoAction, map: "fk_product_deletedBy")
  shops             Shops               @relation(fields: [shopId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_product_shop")

  @@unique([sku, shopId], map: "uq_product_sku_shop")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model Shops {
  id              Int         @id @default(autoincrement())
  userId          Int         @unique
  shopName        String      @db.VarChar(100)
  email           String      @unique @db.VarChar(100)
  phoneNumber     String      @db.VarChar(15)
  shopDescription String?
  address         String      @db.VarChar(255)
  status          SHOP_STATUS @default(PENDING_VERIFICATION)
  adminNote       String?
  createdAt       DateTime?   @default(now()) @db.Timestamptz(6)
  orders          Orders[]
  products        Products[]
  users           Users       @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_shop_user")
}

model Tokens {
  id        Int       @id @default(autoincrement())
  userId    Int
  token     String    @db.VarChar(255)
  createdAt DateTime? @default(now()) @db.Timestamptz(6)
  expiresAt DateTime  @db.Timestamptz(6)
  users     Users     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_token_user")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model Users {
  id                        Int             @id @default(autoincrement())
  username                  String          @unique @db.VarChar(50)
  password                  String
  email                     String          @unique @db.VarChar(100)
  address                   String?         @db.VarChar(255)
  phoneNumber               String?         @db.VarChar(15)
  role                      USER_ROLE       @default(CUSTOMER)
  status                    USER_STATUS     @default(ACTIVE)
  isVerified                Boolean         @default(false)
  createdAt                 DateTime?       @default(now()) @db.Timestamptz(6)
  isDeleted                 Boolean         @default(false)
  deletedAt                 DateTime?       @db.Timestamptz(6)
  categories                Categories[]
  conversationsParticipant1 Conversations[] @relation("conversations_participant1_idTousers")
  conversationsParticipant2 Conversations[] @relation("conversations_participant2_idTousers")
  messages                  Messages[]
  orders                    Orders[]
  productImages             ProductImages[]
  products                  Products[]
  shops                     Shops?
  tokens                    Tokens[]
}
